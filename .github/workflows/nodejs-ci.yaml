name: CI Pipeline for Node.js Services

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  packages: write
  pull-requests: write

jobs:
  discover-and-build:
    name: Discover and Build Node.js Services
    runs-on: ubuntu-24.04

    steps:
      # Check out the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Find services with Node.js
      - name: Discover Node.js Services
        id: discover
        working-directory: services
        run: |
          services=$(find . -name package.json -not -path "*/node_modules/*" | xargs -n1 dirname | sed 's|^\./||' | paste -sd '"","')
          echo "services=[\"$services\"]" >> $GITHUB_OUTPUT
    
    outputs:
      services: ${{ steps.discover.outputs.services }}

  build-and-test:
    name: Build and Test Node.js Services
    needs: discover-and-build
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        service: ${{ fromJson(needs.discover-and-build.outputs.services) }}

    steps:
      # Check out the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Install dependencies
      - name: Install Dependencies
        working-directory: services/${{ matrix.service }}
        run: yarn install

      # Run tests
      - name: Run Tests
        working-directory: services/${{ matrix.service }}
        run: yarn test

      # Lint the code
      - name: Lint Code
        working-directory: services/${{ matrix.service }}
        run: yarn lint

      # Build the application
      - name: Build Application
        working-directory: services/${{ matrix.service }}
        run: yarn build

      # Upload code coverage report
      - name: Upload Code Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-code-coverage
          path: services/${{ matrix.service }}/coverage

      # Upload test results
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-test-results
          path: services/${{ matrix.service }}/test-results

      # # Upload test results
      # - name: Test Reports
      #   uses: xportation/junit-coverage-report@v1.0.3
      #   with:
      #     junit-path: services/${{ matrix.service }}/test-results/junit.xml  
      #     coverage-path: services/${{ matrix.service }}/coverage/clover.xml
      
      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "services/${{ matrix.service }}/test-results/junit.xml"
          output: "services/${{ matrix.service }}/test-results/test-summary.md"
        if: always()

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.service }}-summary.md
          path: "services/${{ matrix.service }}/test-results/test-summary.md"
        if: always()

      - name: Comment PR with test summary
        uses: thollander/actions-comment-pull-request@v3
        with:
          file-path: "services/${{ matrix.service }}/test-results/test-summary.md"
          comment-tag: test-results-${{ matrix.service }}-summary

  docker-build:
    name: Build and Push Docker Images
    needs:
      - build-and-test
      - discover-and-build
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        service: ${{ fromJson(needs.discover-and-build.outputs.services) }}

    steps:
      # Check out the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build Docker image
      - name: Build Docker Image
        working-directory: services/${{ matrix.service }}
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/${{ github.repository }}-${{ matrix.service }}
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            TAG=pr-${{ github.event.pull_request.number }}
          else
            TAG=latest
          fi
          docker build -t $IMAGE_NAME:$TAG .

      # Push Docker image
      - name: Push Docker Image
        if: github.event_name == 'push' && github.ref_name == 'main'
        working-directory: services/${{ matrix.service }}
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/${{ github.repository }}-${{ matrix.service }}
          TAG=latest
          docker push $IMAGE_NAME:$TAG

      # Push PR-specific Docker image
      - name: Push PR Docker Image
        if: github.event_name == 'pull_request'
        working-directory: services/${{ matrix.service }}
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/${{ github.repository }}-${{ matrix.service }}
          TAG=pr-${{ github.event.pull_request.number }}
          docker push $IMAGE_NAME:$TAG
